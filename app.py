# app.py

import gradio as gr
import sys
from pathlib import Path

# --- THI·∫æT L·∫¨P ƒê∆Ø·ªúNG D·∫™N ---
# Th√™m th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n v√†o Python Path ƒë·ªÉ c√≥ th·ªÉ import t·ª´ src v√† scripts
project_root = Path(__file__).resolve().parent
sys.path.append(str(project_root))

# --- B∆Ø·ªöC 1: X√ÇY D·ª∞NG DATABASE (N·∫æU C·∫¶N THI·∫æT) ---
# Import v√† ch·∫°y h√†m build_chroma_db tr∆∞·ªõc khi l√†m b·∫•t c·ª© ƒëi·ªÅu g√¨ kh√°c.
# H√†m n√†y s·∫Ω t·ª± ki·ªÉm tra v√† ch·ªâ x√¢y d·ª±ng DB n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i.
from scripts.build_database import build_chroma_db
build_chroma_db()

# --- B∆Ø·ªöC 2: KH·ªûI T·∫†O RAG PIPELINE ---
from src.chatbot.pipeline import RAGPipeline

pipeline = None # Khai b√°o bi·∫øn pipeline to√†n c·ª•c
try:
    print("--- üí° ƒêang kh·ªüi t·∫°o RAG Pipeline. Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t... ---")
    pipeline = RAGPipeline()
    print("‚úÖ RAG Pipeline ƒë√£ s·∫µn s√†ng ƒë·ªÉ nh·∫≠n c√¢u h·ªèi!")
except Exception as e:
    # N·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c pipeline, ·ª©ng d·ª•ng s·∫Ω b√°o l·ªói nh∆∞ng kh√¥ng b·ªã crash
    print(f"[L·ªñI NGHI√äM TR·ªåNG] Kh√¥ng th·ªÉ kh·ªüi t·∫°o RAG Pipeline: {e}")
    # Bi·∫øn pipeline s·∫Ω v·∫´n l√† None


# --- B∆Ø·ªöC 3: LOGIC X·ª¨ L√ù CHAT ---
def chat_response_function(message, history):
    """
    H√†m n√†y ƒë∆∞·ª£c Gradio g·ªçi m·ªói khi ng∆∞·ªùi d√πng g·ª≠i m·ªôt tin nh·∫Øn.
    """
    if pipeline is None:
        # Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói n·∫øu pipeline kh√¥ng kh·ªüi t·∫°o ƒë∆∞·ª£c
        return "Xin l·ªói, chatbot hi·ªán ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau."
        
    # G·ªçi pipeline ƒë·ªÉ l·∫•y k·∫øt qu·∫£ (bao g·ªìm c√¢u tr·∫£ l·ªùi v√† ngu·ªìn)
    result = pipeline.get_answer(message)
    bot_response = result['answer']
    
    # L·∫•y th√¥ng tin ngu·ªìn v√† ƒë·ªãnh d·∫°ng n√≥
    sources = result.get('sources', [])
    if sources:
        bot_response += "\n\n---"
        bot_response += "\n\n**üîç Ngu·ªìn th√¥ng tin tham kh·∫£o:**"
        for i, source in enumerate(sources):
            source_preview = source.replace('\n', ' ').strip()
            bot_response += f"\n1. *{source_preview[:150]}...*"
            
    return bot_response

# --- B∆Ø·ªöC 4: T·∫†O GIAO DI·ªÜN V·ªöI GRADIO ---
chatbot_interface = gr.ChatInterface(
    fn=chat_response_function,
    title="üéì Chatbot T∆∞ v·∫•n Tuy·ªÉn sinh ƒê·∫°i h·ªçc Duy T√¢n",
    description="Ch√†o m·ª´ng b·∫°n! H√£y h·ªèi t√¥i b·∫•t k·ª≥ c√¢u h·ªèi n√†o li√™n quan ƒë·∫øn th√¥ng tin tuy·ªÉn sinh, ng√†nh h·ªçc, gi·∫£ng vi√™n, v√† c√°c th√†nh t√≠ch c·ªßa tr∆∞·ªùng.",
    examples=[
        ["Ai l√† tr∆∞·ªüng khoa C√¥ng ngh·ªá th√¥ng tin?"],
        ["Ng√†nh Qu·∫£n tr·ªã kh√°ch s·∫°n x√©t tuy·ªÉn nh·ªØng t·ªï h·ª£p m√¥n n√†o?"],
        ["Tr∆∞·ªùng c√≥ th√†nh t√≠ch g√¨ ·ªü k·ª≥ thi Olympic Tin h·ªçc?"],
        ["H·ªçc ph√≠ c·ªßa tr∆∞·ªùng l√† bao nhi√™u?"]
    ],
    chatbot=gr.Chatbot(
        height=550,
        label="Cu·ªôc tr√≤ chuy·ªán",
        show_copy_button=True,
    ),
    textbox=gr.Textbox(
        placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n v√† nh·∫•n Enter",
        container=False,
        scale=7
    ),
    retry_btn="G·ª≠i l·∫°i",
    undo_btn="X√≥a tin nh·∫Øn cu·ªëi",
    clear_btn="B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi",
    theme="soft"
)

# --- B∆Ø·ªöC 5: CH·∫†Y ·ª®NG D·ª§NG ---
if __name__ == "__main__":
    chatbot_interface.launch()